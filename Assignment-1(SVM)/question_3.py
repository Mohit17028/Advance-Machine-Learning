# -*- coding: utf-8 -*-
"""Question 3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YCzyzqk3NxXtnK3tFL2zRsVVdykdHGwz
"""

import numpy as np
import cPickle
from PIL import Image
import matplotlib.pyplot as plt

def extractImagesAndLabels(path, file):
    f = open(path+file, 'rb')
    dicte = cPickle.load(f)
    images = dicte['data']
    Matrix=[]
    for i in images:
        ingle_img_reshaped = np.transpose(np.reshape(i,(3, 32,32)), (1,2,0))
        #x=np.dot(ingle_img_reshaped[...,:3], [0.299, 0.587, 0.114])
        x= ingle_img_reshaped.flatten()
        Matrix.append(x)
    #images = np.transpose(images, (1,2,0))
   
    Matrix = np.array(Matrix)
    labels = dicte['labels']
    labels = np.array(labels)
    print labels.shape
    return Matrix, labels
 
#     labels = dict['labels']

def extractCategories(path, file):
    f = open(path+file, 'rb')
    dict = cPickle.load(f)
    return dict['label_names']

def saveCifarImage(array, path, file):
    # array is 3x32x32. cv2 needs 32x32x3
    array = array.asnumpy().transpose(1,2,0)
    # array is RGB. cv2 needs BGR
    array = cv2.cvtColor(array, cv2.COLOR_RGB2BGR)
    # save to PNG file
    return cv2.imwrite(path+file+".png", array)


path = "/home/mohit/Desktop/Nptel/Week1_Deep Learning For Visual Learning/cifar10/cifar-10-batches-py/"
path=""
Train_data, Train_labels = extractImagesAndLabels(path, "data_batch_1")
Train_data_2, Train_labels_2 = extractImagesAndLabels(path,"data_batch_2")
Train_data_3, Train_labels_3 = extractImagesAndLabels(path, "data_batch_3")
Train_data_t = np.concatenate((Train_data, Train_data_2,Train_data_3), axis=0)
Train_labels_t = np.concatenate((Train_labels, Train_labels_2, Train_labels_3), axis=0)

Test_data, Test_labels = extractImagesAndLabels(path, "test_batch")

Train_data_t.shape

path = "data_batch_5"
path=
f = open(path, "r")

path=""
names = extractCategories(path, "batches.meta")

print names

Train_data_f=[]
Train_label_f=[]
for i in range(Train_data_t.shape[0]):
    if Train_labels_t[i]==3 or Train_labels_t[i]==5:
        Train_data_f.append(Train_data_t[i])
        Train_label_f.append(Train_labels_t[i])

Train_data_f=np.array(Train_data_f)
Train_label_f= np.array(Train_label_f)

## same for Test Data
Test_data_f=[]
Test_label_f=[]
for i in range(Test_data.shape[0]):
    if Test_labels[i]==3 or Test_labels[i]==5:
        Test_data_f.append(Test_data[i])
        Test_label_f.append(Test_labels[i])

Test_data_f=np.array(Test_data_f)
Test_label_f= np.array(Test_label_f)

from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
Vec=[]
Vec_labels=[]
accu=[]
Num_SV=[]
iteration=[]
acc_curr_list=[]
acc_cumm_list =[]
Vec= np.array(Vec)
Vec_labels=np.array(Vec_labels)
for i in range(59):
    iteration.append(i+1)
    Temp_data=Train_data_f[i*100:(i*100)+100]
    Temp_label=Train_label_f[i*100:(i*100)+100]
    Curr_Data=Temp_data
    Curr_label= Temp_label
    Cumm_Data = Train_data_f[0:(i+1)*100]
    Cumm_label = Train_label_f[0:(i+1)*100]
    if i>0:
        Temp_data = np.concatenate((Temp_data,Vec),axis=0)
        Temp_label = np.concatenate((Temp_label,Vec_label),axis=0)
    clf = SVC(kernel="linear")
    clf.fit(Temp_data,Temp_label)
    predict= clf.predict(Test_data_f)
    predict_curr = clf.predict(Curr_Data)
    predict_cumm = clf.predict(Cumm_Data)
    acc = accuracy_score(predict, Test_label_f)
    acc_curr = accuracy_score(predict_curr,Curr_label)
    acc_cumm = accuracy_score(predict_cumm, Cumm_label)
    acc_curr_list.append(acc_curr)
    acc_cumm_list.append(acc_cumm)
    
    print (i+1),"Accuracy on Test" ,acc,"\nAccuracy on Current" ,acc_curr,"\nAccuracy on Cummulative" ,acc_cumm
    accu.append(acc)
    vectors=clf.support_
    print "Suppport_vectors", len(vectors)
    Num_SV.append(len(vectors))
    Vec_t=[]
    Vec_labels_t=[]
    for i in vectors:
        Vec_t.append(Temp_data[i])
        Vec_labels_t.append(Temp_label[i])
    Vec_t=np.array(Vec_t)
    Vec_labels_t=np.array(Vec_labels_t)
    Vec=Vec_t
    Vec_label=Vec_labels_t

import matplotlib.pyplot as plt
plt.plot(iteration,Num_SV)
plt.show()

plt.plot(iteration,acc_curr_list)
plt.show()

plt.plot(iteration, acc_cumm_list)
plt.show()

plt.plot(iteration,accu)
plt.show()

import pickle as pkl
pkl.dump(accu,open("Accuracy_test_set.pkl","w"))
pkl.dump(acc_cumm_list,open("Accuray_cummulative_train_set.pkl","w"))
pkl.dump(acc_curr_list,open("Accuracy_current_training_test_set.pkl","w"))
pkl.dump(Num_SV,open("Support_vectors.pkl","w"))

print Num_SV

